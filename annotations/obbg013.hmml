[video member=nothings twitch_username=nothings2 project=obbg title="Open Block Building Game Development #13" platform=youtube id=OFYOLxmQ55Q annotator=Miblo]
[1:46][@d7samurai][[@cmuratori Casey]'s rant on Direct2D on JACS says it all [ref
    site=Braid
    page="The Jeff and Casey Show on Visual Studio 2010 and Direct2D"
    url=http://braid-game.com/news/2009/01/the-jeff-and-casey-show-on-visual-studio-2010-and-direct2d/]]
[1:59][Recap and set the stage for the day]
[5:05][Consider whether or not to put objid player_id into a structure, to be shared between the client and server][:networking]
[7:50][:Run the game and show the current status]
[9:09][Investigate a :memory issue in build_phys_chunk()]
[12:58][@ruffianeo][What is he using for the voxel queries? k-d-tree or octree, or something else?]
[14:27][@xendev][I'd store location and then try to recreate]
[14:48][Continue investigating this bug]
[17:53][Make worker_manager() set the _processing flag after issuing build_phys_chunk()][:threading]
[18:32][@wow_so_high][If you cannot find the problem you should start over the whole project]
[19:00][Make worker_manager() issue release_gen_chunk() before setting that flag]
[19:44][:Run the game and try to reproduce that bug]
[21:49][Hit the assertion in generate_chunk() and suppose that we have a :memory leak]
[22:32][Add [~stb stb_leakcheck_sdl.h] to the project]
[26:31][@ruffianeo][You can use crtdbg..h etc. to see if you have leaks]
[27:17][Enable :memory leak detection [ref
    site=MSDN
    page="Enabling Memory Leak Detection"
    url=https://msdn.microsoft.com/en-us/library/e5ewb1h3]]
[29:59][:Run the game and try and trigger the bug]
[30:53][Check out the output of this :memory leak checker]
[36:55][:Run the game and give this :memory leak checker one more try]
[38:32][View the output of the :memory leak checker again]
[39:55][Switch to using [~stb stb_leakcheck_sdl.h]][:memory]
[41:22][@ruffianeo][If this is a 32-bit app, then you only have, like, 2GB of working set and then 800MB are large enough. You still have non-leaked data]
[41:51][@kelimion][Right, but 100 * 0.78Mb = 78Mb, not 700 going on 800]
[42:12][Continue plugging [~stb stb_leakcheck_sdl.h] into the project]
[46:41][@ruffianeo][I would find the spots which allocate those 750KB blocks. There is the bug]
[55:00][Introduce stb_leakcheck_strdup()]
[57:08][Make stb_leakcheck_dumpmem() output to a file][:memory]
[59:10][:Run the game and see what Sean's leak checker has to say about it][:memory]
[1:00:05][View our output and find that there are a lot of :memory leaks]
[1:02:11][Having established that generate_chunk() is the culprit, begin to investigate what's wrong with it][:memory]
[1:03:29][Make worker_manager() assert that mcs->cs.chunk is NULL after issuing the four release_gen_chunk() calls, and make mesh_chunk_status() memset to NULL]
[1:05:14][:Run the game, hit that assertion and investigate why]
[1:09:21][Break]
[1:14:02][Return and resume poking at this thing]
[1:14:35][Determine to do a leak check capture in order to get some sense of how much :memory ought to be allocated]
[1:16:21][Make mesh_chunk_status() pass the entire mcs to memset()]
[1:17:28][:Run the game and see if this still leaks][:memory]
[1:19:39][Finally crash in generate_chunk() and inspect stb_leakcheck_dump.txt]
[1:23:12][Tweak the output of stb_leakcheck_dumpmem()]
[1:24:30][@toaoo][Hope none of those pro garbage collection guys are watching]
[1:25:36][Follow the function calls back from generate_chunk()]
[1:28:39][Commit "investigating leaks" and then revert back to a previous commit]
[1:30:06][@ruffianeo][Nope, but the RAAI guys are watching. If nothing else, I would use C++ just to get destructors]
[1:30:20][:Run the game and see if leak :memory on this old code]
[1:31:22][Hit that same assertion and determine that the :memory leak is nothing to do with the new :physics]
[1:32:36][Checkout master and resume where we left off]
[1:33:12][Toggle off the :physics requests in physics_set_player_coord() and make SDL_main set client_player_input.flying to True]
[1:35:09][@e10dee4d][HEAD is the currently checked out version]
[1:35:40][:Run the game until the :memory overflows and then dump the count]
[1:37:47][Inspect the dump]
[1:41:33][Limit MAX_BUILT_MESHES to 32 and MAX_TASKS to 64, then :run the game]
[1:44:46][Hit a different assertion, this one in the terrain generation]
[1:46:29][Determine that it wasn't a :memory leak, rather that we are using a lot of :memory]
[1:47:21][Reduce GEN_CHUNK_CACHE_X_LOG2 and _Y_LOG2 to 4]
[1:48:25][Reenable the new :physics and resume :networking]
[1:49:29][Commit "reduce # of genchunks in flight by shrinking cache and reducing # of pending meshes"]
[1:50:00][Reduce MAX_BUILT_MESHES to 16, :run it in release and realise that that broke something]
[1:51:01][Try reducing MAX_BUILT_MESHES to 32 and making request_mesh_generation() subtract 16 from that value when determining how many to request]
[1:51:59][:Run with these settings in release, and then set MAX_BUILT_MESHES to (16+16) and check how much :memory it is using]
[1:54:57][Commit "tweak mesh request quantity"]
[1:55:15][@soysaucethekid][You talked about being able to create objects in the network side][:networking]
[1:56:10][Finally try to do some :networking]
[1:57:01][Create network.c and begin to write a protocol for sending UDP packets][:networking]
[2:00:09][@alpha2244][Please use TCP, not UDP!]
[2:01:08][@ruffianeo][lol even the second life guys learned after a few years that UDP over internet = fail][:networking]
[2:03:30][Make SDL_main() call SDLNet_Init() [ref
    site=SDL
    page=SDL_net
    url=https://www.libsdl.org/projects/SDL_net/docs/SDL_net_frame.html]][:networking]
[2:07:54][:Run the game and see that it still works]
[2:08:25][@marsol0x][TCP just hides those issues in its protocol. All packets on a network (include the Internet) are UDP packets, basically][:networking]
[2:09:10][Continue setting up SDL_net][:networking]
[2:19:11][Plan to just set up the connection tonight][:networking]
[2:20:49][Introduce net_init()][:networking]
[2:21:39][@kelimion][@nothings2: Will single player eventually short-circuit the socket, or will it go out over loopback? Probably easier to debug if it uses the same interface as multiplayer, and not worth the possible optimisation of bypassing it?][:networking]
[2:23:52][@stdystate][@Nothings2 I looked at the source and it just seems like a bad API choice. AllocPacket allocates a separate buffer of size on top of the exposed UDPpacket structure. There's no weird platform stuff that I can see][:networking]
[2:24:25][Introduce net_receive()][:networking]
[2:25:45][@kelimion][@nothings2: By short-circuit it I meant not pushing it on loopback, but using the same structures in memory. The not short-circuiting being pushing it on loopback as if it were a network connected player][:networking]
[2:29:35][Introduce net_send()][:networking]
[2:33:38][@marsol0x][@Nothings2 Channels are for multicasting, it seems like][:networking]
[2:34:49][Implement net_send()][:networking]
[2:36:38][@marsol0x][Unless multiplexing == multicasting][:networking]
[2:38:14][Continue implementing net_send()][:networking]
[2:41:51][@kelimion][Not even a netcat hello world example for SDL2 available in its own docs? That sucks]
[2:42:38][Make net_send() return a Bool][:networking]
[2:44:03][Try making net_init() send a test string over the network][:networking]
[2:46:50][@ttbjm][Was gone for an hour, did he fix the :memory leak?]
[2:47:52][:Run the game and hit the firewall]
[2:48:45][Try making net_send() set the address.host the other way around][:networking]
[2:51:29][Break into net_init() and inspect the values]
[2:52:50][Try making net_send() send the packet to both addresses]
[2:58:14][@e10dee4d][SDLNet_UDP_Bind?]
[2:59:06][Read through the procedure one more time and comment it]
[3:00:01][@bitshift8][Do you call SDLNet_CheckSockets before SDLNet_SocketReady?]
[3:02:29][Change the logic in net_receive(), :run the game and see if we receive anything]
[3:04:43][Read the documentation]
[3:10:27][Stop]
[/video]
