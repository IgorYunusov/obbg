[video member=nothings twitch_username=nothings2 project=obbg title="Open Block Building Game Development #15" platform=youtube id=M5O2FMhArZ8 annotator=Miblo]
[1:09][Update the overview]
[3:17][Consult the TODO list]
[5:02][Recap and set the stage for the day]
[9:28][Consider making client_net_tick() and server_net_tick() work at 60 ticks per second][:networking]
[10:49][@PLACEHOLDER][Visualise the client and the server thought where the client was respectively]
[11:02][@PLACEHOLDER][Will the client assume movement is act by the server and snap back if it's later or must every move be acknowledged by the server?]
[12:43][Consider making the client transmit last N inputs][:networking][:"input handling"]
[16:40][Setup the :"input handling" structs, introducing player_net_controls and net_client_input][:networking]
[23:29][Enable client_net_tick() to handle net_client_input][:networking]
[25:25][@PLACEHOLDER][UDP packet size?]
[25:33][@PLACEHOLDER][TCP vs UDP?]
[26:15][Continue working on client_net_tick()][:networking]
[32:27][Introduce angle_to_network()][:networking]
[33:46][Enable server_net_tick() handle net_client_input][:networking]
[34:19][@PLACEHOLDER][Why are you actually typing out the value of Ï€ instead of #defining it?]
[36:44][Continue working on server_net_tick()][:networking]
[37:43][Introduce angle_from_network()][:networking]
[39:25][:Run the game, see that it doesn't work exactly the same as it was and investigate why]
[43:11][Change how client_net_tick() computes the angles][:networking]
[45:59][:Run the game and see that it now works roughly as expected]
[47:28][Commit "begin sending correct client input data"]
[50:18][Enable SDL_main() to let the OS pick the client's port][:networking]
[50:55][:Run the game and find that it's all still working, except for the second client spawning in a tree]
[52:36][Commit "automatically use random port number for client"]
[53:19][@PLACEHOLDER][Did you say something nice about Windows 10?]
[53:31][@PLACEHOLDER][What font are you using?]
[54:44][The conceptual thing about today's stream]
[55:47][@PLACEHOLDER][Twitch is a lot more sane via livestreamer]
[56:42][Consider redoing the :physics, and research client-side prediction]
[1:02:41][@PLACEHOLDER][Why do you like dark on light?]
[1:23:07][@PLACEHOLDER][What is the current status?]
[1:27:03][@PLACEHOLDER][Queue moves]
[1:27:29][@PLACEHOLDER][Have you already looked at the Unreal Networking Architecture?]
[1:48:21][@PLACEHOLDER][Could it be meant that this is how you do the player movement?]
[1:54:48][@PLACEHOLDER][They definitely don't rewind player movement]
[1:55:25][@PLACEHOLDER][Rewinding player movement causes rubberbanding]
[1:58:53][Assume that we don't have to rewind :physics][:networking]
[2:10:37][Considering packet loss and possibly buffering more if the client's ping is high][:networking]
[2:22:49][In order to minimise latency, you immediately process what players do][:networking]
[2:26:04][[ref
    site="Gaffer on Games"
    page="Sending and Receiving Packets"
    url=http://gafferongames.com/networking-for-game-programmers/sending-and-receiving-packets/]]
[2:28:41][Consider the potential for cheating][:networking]
[2:33:32][@PLACEHOLDER][How much did I miss?]
[2:33:37][Update the overview]
[2:35:22][@PLACEHOLDER][Is there a problem with SDL_net?]
[2:36:00][Four approaches to server-side physics when doing client-side prediction and receiving only player-input from clients][:networking]
[2:42:07][@PLACEHOLDER][Would you be okay with strings being a different colour?]
[2:42:58][Consider which of these approaches to go for][:networking]
[2:55:26][Update the TODO list][:networking]
[2:56:47][Pseudo-code the client input buffering algorithm][:networking]
[3:12:24][Consult the Unreal Networking Architecture [ref
    site="Unreal Developer Network"
    page="Unreal Networking Architecture"
    url=https://udn.epicgames.com/Three/NetworkingOverview.html#The%20update%20loop]]
[3:20:42][Consult 'I Shot You First: Networking the Gameplay of HALO: REACH' [ref
    site="GDC Vault"
    page="I Shot You First: Networking the Gameplay of HALO: REACH"
    url=http://gdcvault.com/play/1014345/I-Shot-You-First-Networking]]
[3:29:54][Consult The TRIBES Engine Networking Model [ref
    article="The TRIBES Engine Networking Model"
    author="Mark Frohnmayer and Tim Gift"
    url=http://www.pingz.com/wordpress/wp-content/uploads/2009/11/tribes_networking_model.pdf]]
[3:37:28][Continue pseudo-coding this][:networking]
[3:42:11][@PLACEHOLDER][Maximum latency for close quarters gameplay for tournament / casual is 100-200ms]
[3:49:26][Update the overview]
[3:51:29][Consider bunching up some of the updates and tweak the pseudo-code][:networking]
[3:56:45][@norad91][We didn't have so many BSoD back on Atari and DOS, etc.]
[3:58:23][@PLACEHOLDER][Any reason you're named @nothings2?][:trivia]
[4:03:05][Continue documenting this pseudo-code][:networking]
[4:04:00][@PLACEHOLDER][Have you considered changing the category to game development?]
[4:05:15][Stage the work and add some steps to the server main loop][:networking]
[4:13:23][@PLACEHOLDER][So what did I miss?]
[4:13:34][Update the overview]
[4:14:02][Stop there]
[/video]
