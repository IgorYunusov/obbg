[video member=nothings twitch_username=nothings2 project=obbg title="Open Block Building Game Development #17" platform=youtube id=CzYAETdybL4 annotator=Miblo]
[2:54][Reintroduce the stream]
[5:03][Recap and set the stage for the day]
[5:55][Fix some potential typos in client_net_tick()][:networking]
[6:27][A few words on the complicated set of logic used for the :networking]
[9:53][On a misdesign of the :networking, and making the right trade-offs in the HandmadeDev sense][:maths]
[13:33][What is incorrect about the original analysis][:networking][:maths]
[19:17][@youmee][@nothings2 What do you usually drink in dark container / bottle?]
[20:12][@abnercoimbre][/me is digging @nothings2's t-shirt]
[20:21][@joshuanatrop][@Nothings2 what keyboard is that?]
[20:34][Consider the sanity of the new :maths]
[21:30][@connor_rentz][I'm pretty sure [@nothings Sean] has an FAQ under the stream if you're on twitch]
[22:19][:Run the game and verify where things are]
[24:35][Hit the assert in physics_move_walkable() involving an out-of-range problem, and investigate what's happening][:physics]
[27:51][@abnercoimbre][@nothings2 For newcomers, :networking capability is leveraged through WinSock or a cross-platform lib?]
[29:24][Continue considering what's happening in physics_move_walkable()][:physics]
[34:19][The cases we need to test for :collision detection][:blackboard]
[34:23]["I was trying to not be at this level of explanation for this channel so much"][quote=2]
[38:26][@quartertron][Did [@nothings Sean] go into detail about his voxel rendering engine in previous streams, and are they on YouTube somewhere?]
[39:08][Handling those :collision cases][:blackboard]
[44:06][Implement additional logic for moving upwards in physics_move_walkable()][:physics :collision]
[46:32][:Run the game, test the :collision logic and find that the :"input handling" fell out of sync]
[49:01][:Run the client in the debugger and investigate what happens if / when the :"input handling" fails]
[50:22][@nonsensation][Just out of curiosity, what would be the performance gain when this is compiled in a recent compiler and all its improvements over the years compared to vs6, or whatever it is?]
[50:55][@kknewkles][@nothings2, something I've been meaning to ask for a long time (possibly have asked already a while ago): Did you guys actually make a Jeff and Casey Show documentary?]
[51:26][@michaelangel007][@Nothings2 What rate is the engine running at? Fixed or Variable? How do you decouple :rendering from :physics?]
[55:22][:Run the server in the debugger and see if the :"input handling" fails this time]
[56:12][Plug the :rant on why sizeof and size_t should be signed [ref
    site=YouTube
    page="open block building game development #16"
    url=https://youtu.be/_aq9m0RRbhM?t=2h5m35s]]
[57:10][@connor_rentz][What episode was that?]
[57:15][Get stuck and again :run the client in the debugger to see that the bug will indeed not trigger in this case]
[1:01:54][@miblo][NOTE(annotator): size_t rant in the very previous episode to this one]
[1:02:08][@miblo][@nonsensation: I just use my weechat log]
[1:02:41][Continue to investigate this jumping bug]
[1:02:50][@wasenabled][@Nothings2, are you jumping up blocks via the keyboard or are you auto-climbing blocks as you collide / move into them?][:movement]
[1:12:27][@michaelangel007][Which axis was up / down?]
[1:12:32][@michaelangel007][@Nothings2 Can blocks be destroyed? How many 'milliseconds' is the voxel -> polygon meshing?]
[1:14:14][Make process_player_input() always use the most recent input][:"input handling" :networking]
[1:16:33][:Run the game and see that the lag is a little better and that we still have the jump bug]
[1:17:09][On destroying blocks]
[1:18:19][@michaelangel007][@Nothings2 Last April you had a great YouTube demo "stb_voxel_render.h programming library" [ref
    site=YouTube
    page="stb_voxel_render.h programming library"
    url=https://www.youtube.com/watch?v=2vnTtiLrV1w] - is the data set available so we can run this offline?]
[1:20:08][#define NO_PLAYER_INPUT_BUFFERING]
[1:21:13][@soysaucethekid][@Nothings2: You mentioned the :physics simulator only works around the origin at the moment? Is this because of the network side of things?]
[1:22:46][@bonqen][Haven't heard any construction]
[1:25:07][Enable toggling the :camera smoothing in client_view_physics()]
[1:27:30][:Run the game and see that the :camera is solidly locked to the :movement]
[1:28:04][@michaelangel007][@Nothings2 Why the dt*60?]
[1:31:05][Describe the point of Z_EPSILON in snapping the player to the voxel][:collision]
[1:33:03][:Run the game, consider our :networking bugs and investigate the jumping one]
[1:42:01][@michaelangel007][Moving backwards: not clamping negative velocity?]
[1:44:19][@michaelangel007][@Nothings2 Could be a trig bug, sin / cos]
[1:46:41][Toggle off some of the new logic in client_view_physics(), :run the game and find that it's still happening]
[1:48:01][Pass some known values to the objspace_to_worldspace() call in player_physics()][:physics]
[1:52:24][Break into objspace_to_worldspace(), inspect the values and wonder why x is 90 degrees for a level view]
[1:54:49][Make create_connection() initialise the player angles and velocities][:networking]
[1:58:20][Discover an undocumented hack in client_build_input() and make server_net_tick_pre_physics() handle that hack][:physics :networking]
[2:01:29][:Run the game and find that the bogus movement and jumping is fixed]
[2:04:28][@rupan3][Wow [@nothings Sean] uses git]
[2:06:35][@wasenabled][@Nothings2, quick question: Will single player be done as callbacks to the server code or will it run localhost server?][:networking]
[2:13:00][@michaelangel007][Summary: Optimal chunk size is based on the player max speed]
[2:13:56][@sludgefrog][If you have projectiles on linear trajectories with client prediction, is a 3x3 physics boundary going to be sufficient?]
[2:15:17][@thibtib][mmh, you can move faster than generation in a lot of games][quote=3]
[2:16:54][@michaelangel007][@nothings2 Any plans on geomipmapping (chunk Level-of-Detail)?]
[2:17:17][@wasenabled][MMH = "Meet Me Halfway"]
[2:17:31][@abnercoimbre][I'm assuming OBS has Linux support?]
[2:18:11][Commit "continue new networking regime"]
[2:18:52][@norad91][*OBS Sean not OOBG]
[2:19:14][@insofaras][I might be interested in porting it to Linux][quote=4]
[2:19:40][Update the overview]
[2:20:36][@iantjac][@Nothings2 Do you consider [~stb stb_voxel_render] stable? For example, if I wanted to use the upcoming Ludum Dare as an excuse to play with it, could I trust it to be quite stable?]
[2:22:35][@michaelangel007][10 bytes per voxel?]
[2:22:51][@michaelangel007][Does [~stb stb_voxel_] support transparent / water surfaces?]
[2:24:42][@areob][@nothings2 Do you have a maximum number of lines of code as a limit for single header libraries?]
[2:25:12][@norad91][I'm currently trying to make a little game engine with Go and look how it goes in a GC'ed language and to look how nice their concurrency stuff is, so it's nice to see you doing all this networking / game stuff again. It's pretty motivating to have a programming stream at the same time you program. So *end rant* and thank you [@nothings Sean]]
[2:25:16][@guit4rfreak][@Nothings2 Why is Minecraft so incredibly instable?]
[2:27:50]["I do not support the Jeff and Casey rant about GC"][quote=5]
[2:28:42][@norad91][It's just written in a not-great GC'ed language by a single person and has accumulated A LOT of technical debt over the years. I don't think it was that terribly coded with respect to the tools used]
[2:29:29][@wasenabled][Dogma]
[2:29:38][On garbage collection][:language :experience :memory]
[2:31:03]["Never force yourself to write garbage collector mutator barriers by hand"][quote=6]
[2:32:32][On caring about performance and how to achieve it][:experience]
[2:33:49]["Don't do the hard work unnecessarily"][quote=7]
[2:35:38][@guit4rfreak][@Nothings2 But do you disagree with Casey's statement that as a somewhat experienced programmer you don't really think about :memory management much, and that it is relatively trivial?]
[2:37:53][:Demo how little :memory management was done in Promesst]
[2:41:14][@norad91][@Nothings2 As I haven't written a GC I only know the basic theory. Couldn't you write a GC where you could still use free() and have that pipe through to the garbage collector (at least if it's somehow concurrent)?][:memory]
[2:43:53][@christianrohr][@Nothings2 regarding physics: when both client and server simulate :physics, how do you make sure that both sides produce the same (floating point) results? [ref
    site="Random ASCII"
    page="Floating-Point Determinism"
    url=https://randomascii.wordpress.com/2013/07/16/floating-point-determinism/]]
[2:46:23][@christianrohr][If your server runs on Linux compiled with GCC and the client runs on windows compiled with VS, you're not guaranteed to get the same results]
[2:46:42][@michaelangel007][Traditionally there is no Virtual :Memory on consoles. You have a hard, fixed, amount of RAM so fixed arrays are fastest and simplest]
[2:47:02][@thibtib][Is John Carmack really good?]
[2:47:35][@iantjac][@Nothings2 Carmack mentioned on twitter that he would use double instead of float in the future. Is there any benefit to using float instead of double nowadays?]
[2:47:52][@norad91][@nothings2 Have you looked at Rust's borrow / lifetime system? I played around with the language a bit yesterday. It's pretty nice although some of the syntax (closures and especially Options) is really gross and the libraries (system and community) all unnecessarily use all features all the time: there's closures and Options everywhere, it's pretty terrible. But the language design itself is pretty nice. Another problems is, the compiler is dog slow, so I had to stop][:language]
[2:48:21][@thibtib][Things should be easier with integers only...]
[2:49:54][:Demo the LEA instruction in :asm]
[2:54:46][@nonsensation][Is there a way of "optimizing for cache-size" instead of just testing different :memory sizes in your algorithm / structures, or should I just not care this much as long it's "kind of" cache friendly?][:optimisation]
[2:58:39][@christianrohr][@Nothings2 gcc 5.3 does distinguish between (a << 8 ) | b and (a << 8) + b (at least with -O2 and -O3): [ref 
    site=imgur
    url=https://i.imgur.com/Da0xp9j.png]]
[3:00:10][@michaelangel007]["Register spill" is a non-trivial topic]
[3:00:56][On how LEA has a multiply by 2, 4 or 8 in it][:asm]
[3:01:36][@norad91][@nothings2 Have you looked at Agner Fog's architecture proposal?]
[3:02:34][@michaelangel007][@Nothings2 What work would need to be done to support "round" pillar column blocks and 1/4 slopes (it supports 1/2 slopes already, if I recall correctly)?]
[3:08:31][An idea for ~OBBG that would allow you to have maybe 256 face types]
[3:12:03][@nonsensation][As a follow up questions on the machines: What machine generation is still worth targeting (as in CPU and OpenGL version) for a decent indie 3D game?]
[3:12:31][@michaelangel007][Different normals == no shared vertices]
[3:12:53][@christianrohr][@Nothings2 How would you go about adding arbitrary 3D modelled objects to the voxel world, let's say a chair or a fence?]
[3:14:37][Stop the stream]
[/video]
