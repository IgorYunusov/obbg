[video title="Open Block Building Game Development #4 (2/2)" platform=youtube id=PavPX8hbxgs]
[0:19][@dravorek][In C++ where i could be an iterator, you're better off with ++i]
[0:52][@vavassor][I'm not sure whether it has had any real practical effect, to be honest]
[1:38][See all the calls to malloc() in mesh_builder.c]
[3:13][@dravorek][I mean you're generating a value that's never used, that seems like something the first optimization path would get]
[3:43][@pzurita][@nothings2 Do you use any static analysis tools such as PC-lint for when you write code at RAD?]
[4:35][Realise that we are uploading meshes but never updating the fact that they have been uploaded]
[6:42][Introduce set_mesh_chunk_for_coord()][:"mesh building"]
[9:48][Run the :game and see that it's kind of the right data]
[10:13][@canadian1010][@nothings2 Why don't you use comments?]
[11:04][Run the :game again until it crashes]
[11:18][@jtibble][@nothings2 Do you take into account velocity of camera when sorting chunks?]
[12:01][@garlandobloom][What is happening with the floating things?]
[12:26][Run the :game and look at the erroneous data]
[13:55][@jtibble][You could assert that if you remain stationary, eventually the chunks in the work-queue trend to zero]
[17:26][@bitshift8][Do you run VC6 in a virtual machine on win7? I tried to get VC6 to work a while back, had to use a winXP VM, though]
[18:05][Investigate how we could be getting the wrong chunk data][:"mesh building"]
[19:06][Make init_mesh_build_threads() set mesh_worker_num = 1, run the :game and find that the data is correct][:threading]
[20:19][Make init_mesh_build_threads() set mesh_worker_num = 2, run the :game and find that the data is incorrect][:threading]
[21:23][@jtibble][Could the chunk data have been corrupted by the threads writing to it simultaneously?]
[21:48][Look through what happens after generating the terrain]
[24:22][@garlandobloom][I will say it would've been nice if Minecraft ran like this]
[25:41][@jtibble][Can you detect when a chunk has been generated incorrectly, and work backwards from there?]
[26:58][Assert that we have a msc->chunk_set_valid in worker_manager()]
[27:31][Run the :game and do not hit that assertion]
[30:24][@nightblade71][What's the best language to start with?]
[31:50][Introduce check_chunk_sets()]
[33:55][@gluttonys][My question is: why do you use such an older version of visual studio?]
[35:31][Continue implementing check_chunk_sets()]
[36:44][Introduce validate()]
[38:18][Run the :game and find that the error was not caught]
[38:42][Make mesh_worker_handler() call validate()]
[39:11][Run the :game and find that the error was again not caught]
[40:28][Make validate() operate on the Z_SEGMENT_SIZE, run the :game and hit its assertion]
[41:08][Make validate() operate on the GEN_CHUNK_SIZE_X and GEN_CHUNK_SIZE_Y, run the :game and do not hit its assertion]
[41:42][Introduce build_data struct in order to give mesh_worker_handler() a face_buffer][:"mesh building" :threading]
[47:55][@norad91][@nothings2 Isn't it safer to assume that < 1% of people have more than 8 threads, though why not use less mem if possible?]
[48:22][@paulygon104][It's a bug, not The bug, I don't think]
[48:42][Pass the build_data where necessary]
[51:17][Run the :game and find that it doesn't build anything]
[51:33][Use the build_data in mesh_worker_handler(), run the :game and find that it is working]
[53:30][Build it in release and run the :game again]
[55:00][Increase the view_distance, run the :game again and run out of memory upon moving]
[55:54][Commit threaded procgen & mesh building]
[56:27][@drive137][May have to see if mine builds in 2013]
[57:24][Update the task list and reflect on the bug]
[59:38][@furlchoi][Wonder how much work it'd be to get it to build 64-bit]
[1:01:56][@norad91][No inline asm in [~stb stb.h]?]
[1:03:40][The plan regarding premature :optimisation]
[1:11:02][Wrap up]
[/video]
